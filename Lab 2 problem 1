#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int ar[100];
    int head;
    int tail;
    int cnt;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    if (!obj) return NULL; // Handle allocation failure
    obj->head = 0;
    obj->tail = 0;
    obj->cnt = 0;
    return obj;
}

void myQueuePush(MyQueue* obj, int x) {
    if (obj == NULL || obj->cnt >= 100) return; // Prevent overflow
    obj->ar[obj->tail] = x;
    obj->tail = (obj->tail + 1) % 100;
    obj->cnt++;
}

int myQueuePop(MyQueue* obj) {
    if (obj == NULL || obj->cnt == 0) return -1; // Return -1 if empty
    int val = obj->ar[obj->head]; // Store value before updating head
    obj->head = (obj->head + 1) % 100;
    obj->cnt--;
    return val;
}

int myQueuePeek(MyQueue* obj) {
    if (obj == NULL || obj->cnt == 0) return -1; // Return -1 if empty
    return obj->ar[obj->head];
}

bool myQueueEmpty(MyQueue* obj) {
    if (obj == NULL) return true;
    return obj->cnt == 0;
}

void myQueueFree(MyQueue* obj) {
    if (obj == NULL) return;
    free(obj);
}
